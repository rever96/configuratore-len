{"version":3,"sources":["components/headbar/headbar.component.jsx","components/configuratore/passo.component.jsx","actions.js","components/riassunto/riassunto_end.component.jsx","components/configuratore/configuratore.component.jsx","reducers/config.js","components/bottone/bottone-start.component.jsx","App.js","serviceWorker.js","index.js"],"names":["connect","state","opzioniScelte","props","className","indice","totale","costoTotale","onClick","onPrevClick","Card","onItemClick","src","value","immagine","alt","descrizione","domanda","dispatch","index","totaleDomande","store","console","log","getState","reduce","accumulator","currentValue","opzioneScelta","prezzo","type","titolo","opzioni","length","map","key","nextPasso","handleClick","opzione","end","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","storeConfig","createStore","action","slice","Configuratore","subscribe","setIndex","configJson","Bottonestart","useState","App","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61453efb.chunk.js","sourcesContent":["import './headbar.css';\nimport { connect } from 'react-redux';\nimport React from 'react';\n\nconst Headbar = props => {\n  return (\n    <>\n      <span className=\"center-top \">\n        {props.indice} / {props.totale}\n      </span>\n      <span className=\"right-top\">{props.costoTotale} euro</span>\n      <span className=\"left-top\" onClick={() => props.onPrevClick()}>\n        torna alla domanda precedente\n      </span>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  opzioniScelte: state\n});\n\nexport default connect(mapStateToProps)(Headbar);\n\n// import './headbar.css';\n// import { connect } from 'react-redux';\n// import React from 'react';\n\n// const Headbar = ({ opzioniScelte }) => {\n//   console.log(opzioniScelte);\n//   return (\n//     <>\n//       <span className=\"center-top \">\n//         {props.indice} / {props.totale}\n//       </span>\n//       <span className=\"right-top\"></span>\n//       <span className=\"left-top\" onClick={() => props.onPrevClick()}>\n//         torna alla domanda precedente\n//       </span>\n//     </>\n//   );\n// };\n\n// const mapStateToProps = state => ({\n//   opzioniScelte: state\n// });\n\n// export default connect(mapStateToProps)(Headbar);\n","import './card.css';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { nextPasso, prevPasso } from '../../actions';\nimport Headbar from '../headbar/headbar.component';\n\nconst Passo = ({ domanda, dispatch, index, totaleDomande, store }) => {\n  console.log(store.getState());\n  function handleClick(value, titolo) {\n    console.log(value);\n    dispatch(nextPasso(value, titolo));\n  }\n\n  return (\n    <>\n      <Headbar\n        costoTotale={store\n          .getState()\n          .reduce(\n            (accumulator, currentValue) =>\n              accumulator + currentValue.opzioneScelta.prezzo,\n            0\n          )}\n        totale={totaleDomande}\n        indice={++index}\n        onPrevClick={() => dispatch(prevPasso())}\n      />\n      <section className=\"section question\">\n        <h2>{domanda.titolo}</h2>\n        <div className={'answer-group row-of-' + domanda.opzioni.length}>\n          {domanda.opzioni.map((value, key) => {\n            return (\n              <Card\n                key={key}\n                value={value}\n                onItemClick={() => handleClick(value, domanda.titolo)}\n              />\n            );\n          })}\n        </div>\n      </section>\n    </>\n  );\n};\n\nconst Card = props => {\n  return (\n    <div className=\"col\">\n      <div className=\"answer js--answer\" onClick={() => props.onItemClick()}>\n        <img\n          className=\"answer-image js--answer-image\"\n          src={props.value.immagine}\n          alt={props.value.descrizione}\n        />\n        <span className=\"answer-text\">{props.value.descrizione}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default connect()(Passo);\n","export const nextPasso = (opzioneScelta, domanda) => ({\n  type: 'NEXT',\n  domanda,\n  opzioneScelta\n});\n\nexport const prevPasso = () => ({\n  type: 'PREV'\n});\n\nexport const reset = () => ({\n  type: 'INIT'\n});\n","import React from 'react';\nimport './riassunto_end.css';\nimport { reset } from '../../actions';\nimport { connect } from 'react-redux';\n\nconst RiassuntoEnd = props => {\n  function ricomincia() {\n    props.end();\n    props.dispatch(reset());\n  }\n\n  return (\n    <>\n      <img className=\"intro-image\" src=\"intro.png\" alt=\"\"></img>\n      <h1 className=\"title\">\n        Il costo per la mia app:\n        {props.store\n          .getState()\n          .reduce(\n            (accumulator, currentValue) =>\n              accumulator + currentValue.opzioneScelta.prezzo,\n            0\n          )}\n      </h1>\n      <ul>\n        {props.store.getState().map((opzione, key) => {\n          return <li key={key}>{opzione.opzioneScelta.descrizione}</li>;\n        })}\n      </ul>\n      <button onClick={ricomincia} className=\"button text-uppercase js--start\">\n        Ricomincia da capo\n      </button>\n    </>\n  );\n};\n\nexport default connect()(RiassuntoEnd);\n","import './card.css';\nimport React from 'react';\nimport configJson from '../../assets/config.json';\nimport MioPasso from './passo.component';\nimport { createStore, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reduceConfig } from '../../reducers/config';\nimport RiassuntoEnd from '../riassunto/riassunto_end.component';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nlet storeConfig = createStore(reduceConfig, composeEnhancers());\n\nexport const Configuratore = props => {\n  storeConfig.subscribe(() => {\n    props.setIndex(storeConfig.getState().length);\n  });\n\n  if (props.index === configJson.length) {\n    return (\n      <>\n        <RiassuntoEnd store={storeConfig} end={props.end}></RiassuntoEnd>\n      </>\n    );\n  } else {\n    return (\n      <Provider store={storeConfig}>\n        <MioPasso\n          store={storeConfig}\n          totaleDomande={configJson.length}\n          index={props.index}\n          domanda={configJson[props.index]}\n        />\n      </Provider>\n    );\n  }\n};\n","export const reduceConfig = (state = [], action) => {\n  switch (action.type) {\n    case 'NEXT':\n      return [\n        ...state,\n        {\n          domanda: action.domanda,\n          opzioneScelta: action.opzioneScelta\n        }\n      ];\n    case 'PREV':\n      return state.slice(0, state.length - 1);\n    case 'INIT':\n      return [];\n    default:\n      return state;\n  }\n};\n","import React, { useState } from 'react';\n\nimport './bottone.css';\nimport { Configuratore } from '../configuratore/configuratore.component';\n\nexport function Bottonestart() {\n  const [index, setIndex] = useState(-1);\n  function start() {\n    setIndex(0);\n  }\n\n  function reset() {\n    setIndex(-1);\n  }\n\n  if (index === -1) {\n    return (\n      <>\n        <img className=\"intro-image\" src=\"intro.png\" alt=\"\"></img>\n        <h1 className=\"title\">\n          Quanto costa sviluppare la mia <strong>app</strong>?\n        </h1>\n        <p className=\"subtitle\">\n          Calcola rapidamente il costo per creare la tua app, rispondendo a\n          queste semplici domande.\n        </p>\n        <button onClick={start} className=\"button text-uppercase js--start\">\n          Calcolare\n        </button>\n      </>\n    );\n  } else {\n    return (\n      <Configuratore\n        index={index}\n        setIndex={setIndex}\n        end={reset}\n        className=\"Component\"\n      ></Configuratore>\n    );\n  }\n}\n\nexport default Bottonestart;\n","import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport Bottonestart from './components/bottone/bottone-start.component';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Bottonestart></Bottonestart>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}